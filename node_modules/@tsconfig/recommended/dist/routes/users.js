"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fastify_jwt_1 = __importDefault(require("fastify-jwt"));
const secret_1 = __importDefault(require("../secret"));
// TODO: Change method argument types
function usersRoute(fastify, _options) {
    return __awaiter(this, void 0, void 0, function* () {
        const users = fastify.mongo.db.collection('users');
        fastify.register(fastify_jwt_1.default, { secret: secret_1.default });
        fastify.post('/login', (req, reply) => __awaiter(this, void 0, void 0, function* () {
            const user = yield users.findOne({ email: req.body.email });
            reply.send(new Promise((resolve, reject) => {
                if (user) {
                    if (user.password === req.body.password) {
                        const token = fastify.jwt.sign({ email: req.body.email });
                        resolve({ 'jwt': token });
                    }
                    else {
                        reject('Invalid password');
                    }
                }
                else {
                    reject('Invalid user email');
                }
            }));
        }));
        fastify.get('/users/me', (req, reply) => __awaiter(this, void 0, void 0, function* () {
            const token = req.body.token;
            const decoded = fastify.jwt.verify(token);
            reply.send(new Promise((resolve, reject) => {
                if (decoded) {
                    const user = users.findOne(decoded);
                    resolve(user);
                }
                else {
                    reject('Invalid credentials');
                }
            }));
        }));
    });
}
exports.default = usersRoute;
//# sourceMappingURL=users.js.map